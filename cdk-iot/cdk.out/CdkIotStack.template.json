{
 "Resources": {
  "thermometerstorageA03733C7": {
   "Type": "AWS::S3::Bucket",
   "Properties": {
    "BucketName": "s3-themometer-storage",
    "PublicAccessBlockConfiguration": {
     "BlockPublicAcls": true,
     "BlockPublicPolicy": true,
     "IgnorePublicAcls": true,
     "RestrictPublicBuckets": true
    },
    "Tags": [
     {
      "Key": "aws-cdk:auto-delete-objects",
      "Value": "true"
     }
    ]
   },
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete",
   "Metadata": {
    "aws:cdk:path": "CdkIotStack/thermometer-storage/Resource"
   }
  },
  "thermometerstoragePolicy7263EBBF": {
   "Type": "AWS::S3::BucketPolicy",
   "Properties": {
    "Bucket": {
     "Ref": "thermometerstorageA03733C7"
    },
    "PolicyDocument": {
     "Statement": [
      {
       "Action": [
        "s3:DeleteObject*",
        "s3:GetBucket*",
        "s3:List*"
       ],
       "Effect": "Allow",
       "Principal": {
        "AWS": {
         "Fn::GetAtt": [
          "CustomS3AutoDeleteObjectsCustomResourceProviderRole3B1BD092",
          "Arn"
         ]
        }
       },
       "Resource": [
        {
         "Fn::GetAtt": [
          "thermometerstorageA03733C7",
          "Arn"
         ]
        },
        {
         "Fn::Join": [
          "",
          [
           {
            "Fn::GetAtt": [
             "thermometerstorageA03733C7",
             "Arn"
            ]
           },
           "/*"
          ]
         ]
        }
       ]
      }
     ],
     "Version": "2012-10-17"
    }
   },
   "Metadata": {
    "aws:cdk:path": "CdkIotStack/thermometer-storage/Policy/Resource"
   }
  },
  "thermometerstorageAutoDeleteObjectsCustomResourceC9E7A8A1": {
   "Type": "Custom::S3AutoDeleteObjects",
   "Properties": {
    "ServiceToken": {
     "Fn::GetAtt": [
      "CustomS3AutoDeleteObjectsCustomResourceProviderHandler9D90184F",
      "Arn"
     ]
    },
    "BucketName": {
     "Ref": "thermometerstorageA03733C7"
    }
   },
   "DependsOn": [
    "thermometerstoragePolicy7263EBBF"
   ],
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete",
   "Metadata": {
    "aws:cdk:path": "CdkIotStack/thermometer-storage/AutoDeleteObjectsCustomResource/Default"
   }
  },
  "CustomS3AutoDeleteObjectsCustomResourceProviderRole3B1BD092": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Version": "2012-10-17",
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "lambda.amazonaws.com"
       }
      }
     ]
    },
    "ManagedPolicyArns": [
     {
      "Fn::Sub": "arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "CdkIotStack/Custom::S3AutoDeleteObjectsCustomResourceProvider/Role"
   }
  },
  "CustomS3AutoDeleteObjectsCustomResourceProviderHandler9D90184F": {
   "Type": "AWS::Lambda::Function",
   "Properties": {
    "Code": {
     "S3Bucket": {
      "Fn::Sub": "cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}"
     },
     "S3Key": "0758db37a61ce7177f50559cad0340df233a2001b5880615afa517203dd67c21.zip"
    },
    "Timeout": 900,
    "MemorySize": 128,
    "Handler": "__entrypoint__.handler",
    "Role": {
     "Fn::GetAtt": [
      "CustomS3AutoDeleteObjectsCustomResourceProviderRole3B1BD092",
      "Arn"
     ]
    },
    "Runtime": "nodejs12.x",
    "Description": {
     "Fn::Join": [
      "",
      [
       "Lambda function for auto-deleting objects in ",
       {
        "Ref": "thermometerstorageA03733C7"
       },
       " S3 bucket."
      ]
     ]
    }
   },
   "DependsOn": [
    "CustomS3AutoDeleteObjectsCustomResourceProviderRole3B1BD092"
   ],
   "Metadata": {
    "aws:cdk:path": "CdkIotStack/Custom::S3AutoDeleteObjectsCustomResourceProvider/Handler",
    "aws:asset:path": "asset.0758db37a61ce7177f50559cad0340df233a2001b5880615afa517203dd67c21",
    "aws:asset:property": "Code"
   }
  },
  "themometerwebA10CBA95": {
   "Type": "AWS::S3::Bucket",
   "Properties": {
    "BucketName": "s3-themometer-web",
    "PublicAccessBlockConfiguration": {
     "BlockPublicAcls": true,
     "BlockPublicPolicy": true,
     "IgnorePublicAcls": true,
     "RestrictPublicBuckets": true
    },
    "Tags": [
     {
      "Key": "aws-cdk:auto-delete-objects",
      "Value": "true"
     },
     {
      "Key": "aws-cdk:cr-owned:dcebfb66",
      "Value": "true"
     }
    ]
   },
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete",
   "Metadata": {
    "aws:cdk:path": "CdkIotStack/themometer-web/Resource"
   }
  },
  "themometerwebPolicy50F5E315": {
   "Type": "AWS::S3::BucketPolicy",
   "Properties": {
    "Bucket": {
     "Ref": "themometerwebA10CBA95"
    },
    "PolicyDocument": {
     "Statement": [
      {
       "Action": [
        "s3:DeleteObject*",
        "s3:GetBucket*",
        "s3:List*"
       ],
       "Effect": "Allow",
       "Principal": {
        "AWS": {
         "Fn::GetAtt": [
          "CustomS3AutoDeleteObjectsCustomResourceProviderRole3B1BD092",
          "Arn"
         ]
        }
       },
       "Resource": [
        {
         "Fn::GetAtt": [
          "themometerwebA10CBA95",
          "Arn"
         ]
        },
        {
         "Fn::Join": [
          "",
          [
           {
            "Fn::GetAtt": [
             "themometerwebA10CBA95",
             "Arn"
            ]
           },
           "/*"
          ]
         ]
        }
       ]
      },
      {
       "Action": "s3:GetObject",
       "Effect": "Allow",
       "Principal": {
        "CanonicalUser": {
         "Fn::GetAtt": [
          "cloudfrontOrigin1S3Origin57D92FB4",
          "S3CanonicalUserId"
         ]
        }
       },
       "Resource": {
        "Fn::Join": [
         "",
         [
          {
           "Fn::GetAtt": [
            "themometerwebA10CBA95",
            "Arn"
           ]
          },
          "/*"
         ]
        ]
       }
      }
     ],
     "Version": "2012-10-17"
    }
   },
   "Metadata": {
    "aws:cdk:path": "CdkIotStack/themometer-web/Policy/Resource"
   }
  },
  "themometerwebAutoDeleteObjectsCustomResource2BF84AFC": {
   "Type": "Custom::S3AutoDeleteObjects",
   "Properties": {
    "ServiceToken": {
     "Fn::GetAtt": [
      "CustomS3AutoDeleteObjectsCustomResourceProviderHandler9D90184F",
      "Arn"
     ]
    },
    "BucketName": {
     "Ref": "themometerwebA10CBA95"
    }
   },
   "DependsOn": [
    "themometerwebPolicy50F5E315"
   ],
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete",
   "Metadata": {
    "aws:cdk:path": "CdkIotStack/themometer-web/AutoDeleteObjectsCustomResource/Default"
   }
  },
  "DeployReactAppAwsCliLayer6C83B54F": {
   "Type": "AWS::Lambda::LayerVersion",
   "Properties": {
    "Content": {
     "S3Bucket": {
      "Fn::Sub": "cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}"
     },
     "S3Key": "8ad7bbf8be94e05d569da95ddb82511dcc959f25054825394cbb86028ccd1b6a.zip"
    },
    "Description": "/opt/awscli/aws"
   },
   "Metadata": {
    "aws:cdk:path": "CdkIotStack/DeployReactApp/AwsCliLayer/Resource",
    "aws:asset:path": "asset.8ad7bbf8be94e05d569da95ddb82511dcc959f25054825394cbb86028ccd1b6a.zip",
    "aws:asset:is-bundled": false,
    "aws:asset:property": "Content"
   }
  },
  "DeployReactAppCustomResourceFEAA9FB4": {
   "Type": "Custom::CDKBucketDeployment",
   "Properties": {
    "ServiceToken": {
     "Fn::GetAtt": [
      "CustomCDKBucketDeployment8693BB64968944B69AAFB0CC9EB8756C81C01536",
      "Arn"
     ]
    },
    "SourceBucketNames": [
     {
      "Fn::Sub": "cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}"
     }
    ],
    "SourceObjectKeys": [
     "5957b65e5be654741a6c72941a53388ee29dabc1649548d1411d9a97397966f7.zip"
    ],
    "DestinationBucketName": {
     "Ref": "themometerwebA10CBA95"
    },
    "Prune": true
   },
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete",
   "Metadata": {
    "aws:cdk:path": "CdkIotStack/DeployReactApp/CustomResource/Default"
   }
  },
  "CustomCDKBucketDeployment8693BB64968944B69AAFB0CC9EB8756CServiceRole89A01265": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "lambda.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "ManagedPolicyArns": [
     {
      "Fn::Join": [
       "",
       [
        "arn:",
        {
         "Ref": "AWS::Partition"
        },
        ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
       ]
      ]
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "CdkIotStack/Custom::CDKBucketDeployment8693BB64968944B69AAFB0CC9EB8756C/ServiceRole/Resource"
   }
  },
  "CustomCDKBucketDeployment8693BB64968944B69AAFB0CC9EB8756CServiceRoleDefaultPolicy88902FDF": {
   "Type": "AWS::IAM::Policy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": [
        "s3:GetBucket*",
        "s3:GetObject*",
        "s3:List*"
       ],
       "Effect": "Allow",
       "Resource": [
        {
         "Fn::Join": [
          "",
          [
           "arn:",
           {
            "Ref": "AWS::Partition"
           },
           ":s3:::",
           {
            "Fn::Sub": "cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}"
           },
           "/*"
          ]
         ]
        },
        {
         "Fn::Join": [
          "",
          [
           "arn:",
           {
            "Ref": "AWS::Partition"
           },
           ":s3:::",
           {
            "Fn::Sub": "cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}"
           }
          ]
         ]
        }
       ]
      },
      {
       "Action": [
        "s3:Abort*",
        "s3:DeleteObject*",
        "s3:GetBucket*",
        "s3:GetObject*",
        "s3:List*",
        "s3:PutObject",
        "s3:PutObjectLegalHold",
        "s3:PutObjectRetention",
        "s3:PutObjectTagging",
        "s3:PutObjectVersionTagging"
       ],
       "Effect": "Allow",
       "Resource": [
        {
         "Fn::GetAtt": [
          "themometerwebA10CBA95",
          "Arn"
         ]
        },
        {
         "Fn::Join": [
          "",
          [
           {
            "Fn::GetAtt": [
             "themometerwebA10CBA95",
             "Arn"
            ]
           },
           "/*"
          ]
         ]
        }
       ]
      }
     ],
     "Version": "2012-10-17"
    },
    "PolicyName": "CustomCDKBucketDeployment8693BB64968944B69AAFB0CC9EB8756CServiceRoleDefaultPolicy88902FDF",
    "Roles": [
     {
      "Ref": "CustomCDKBucketDeployment8693BB64968944B69AAFB0CC9EB8756CServiceRole89A01265"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "CdkIotStack/Custom::CDKBucketDeployment8693BB64968944B69AAFB0CC9EB8756C/ServiceRole/DefaultPolicy/Resource"
   }
  },
  "CustomCDKBucketDeployment8693BB64968944B69AAFB0CC9EB8756C81C01536": {
   "Type": "AWS::Lambda::Function",
   "Properties": {
    "Code": {
     "S3Bucket": {
      "Fn::Sub": "cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}"
     },
     "S3Key": "f98b78092dcdd31f5e6d47489beb5f804d4835ef86a8085d0a2053cb9ae711da.zip"
    },
    "Role": {
     "Fn::GetAtt": [
      "CustomCDKBucketDeployment8693BB64968944B69AAFB0CC9EB8756CServiceRole89A01265",
      "Arn"
     ]
    },
    "Handler": "index.handler",
    "Layers": [
     {
      "Ref": "DeployReactAppAwsCliLayer6C83B54F"
     }
    ],
    "Runtime": "python3.7",
    "Timeout": 900
   },
   "DependsOn": [
    "CustomCDKBucketDeployment8693BB64968944B69AAFB0CC9EB8756CServiceRoleDefaultPolicy88902FDF",
    "CustomCDKBucketDeployment8693BB64968944B69AAFB0CC9EB8756CServiceRole89A01265"
   ],
   "Metadata": {
    "aws:cdk:path": "CdkIotStack/Custom::CDKBucketDeployment8693BB64968944B69AAFB0CC9EB8756C/Resource",
    "aws:asset:path": "asset.f98b78092dcdd31f5e6d47489beb5f804d4835ef86a8085d0a2053cb9ae711da",
    "aws:asset:is-bundled": false,
    "aws:asset:property": "Code"
   }
  },
  "Stream790BDEE4": {
   "Type": "AWS::Kinesis::Stream",
   "Properties": {
    "Name": "themometer",
    "RetentionPeriodHours": 48,
    "StreamModeDetails": {
     "StreamMode": "ON_DEMAND"
    }
   },
   "Metadata": {
    "aws:cdk:path": "CdkIotStack/Stream/Resource"
   }
  },
  "snsiot647BE6CE": {
   "Type": "AWS::SNS::Topic",
   "Properties": {
    "TopicName": "sns-iot"
   },
   "Metadata": {
    "aws:cdk:path": "CdkIotStack/sns-iot/Resource"
   }
  },
  "snsiotstorytimebot21gmailcom2076197D": {
   "Type": "AWS::SNS::Subscription",
   "Properties": {
    "Protocol": "email",
    "TopicArn": {
     "Ref": "snsiot647BE6CE"
    },
    "Endpoint": "storytimebot21@gmail.com"
   },
   "Metadata": {
    "aws:cdk:path": "CdkIotStack/sns-iot/storytimebot21@gmail.com/Resource"
   }
  },
  "LambdaKinesisStreamServiceRole1ED1B3BD": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "lambda.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "ManagedPolicyArns": [
     {
      "Fn::Join": [
       "",
       [
        "arn:",
        {
         "Ref": "AWS::Partition"
        },
        ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
       ]
      ]
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "CdkIotStack/LambdaKinesisStream/ServiceRole/Resource"
   }
  },
  "LambdaKinesisStreamServiceRoleDefaultPolicyF267DCB3": {
   "Type": "AWS::IAM::Policy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": [
        "kinesis:DescribeStream",
        "kinesis:DescribeStreamSummary",
        "kinesis:GetRecords",
        "kinesis:GetShardIterator",
        "kinesis:ListShards",
        "kinesis:ListStreams",
        "kinesis:SubscribeToShard"
       ],
       "Effect": "Allow",
       "Resource": {
        "Fn::GetAtt": [
         "Stream790BDEE4",
         "Arn"
        ]
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "PolicyName": "LambdaKinesisStreamServiceRoleDefaultPolicyF267DCB3",
    "Roles": [
     {
      "Ref": "LambdaKinesisStreamServiceRole1ED1B3BD"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "CdkIotStack/LambdaKinesisStream/ServiceRole/DefaultPolicy/Resource"
   }
  },
  "LambdaKinesisStream88AE1F2E": {
   "Type": "AWS::Lambda::Function",
   "Properties": {
    "Code": {
     "S3Bucket": {
      "Fn::Sub": "cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}"
     },
     "S3Key": "1f237f8bdc1f8621b653c2bc69442cb55d3ca433fabc7b6eee1dada665967e82.zip"
    },
    "Role": {
     "Fn::GetAtt": [
      "LambdaKinesisStreamServiceRole1ED1B3BD",
      "Arn"
     ]
    },
    "Description": "get eventinfo from kinesis data stream",
    "Environment": {
     "Variables": {
      "topicArn": {
       "Ref": "snsiot647BE6CE"
      }
     }
    },
    "Handler": "index.handler",
    "Runtime": "nodejs14.x",
    "Timeout": 3
   },
   "DependsOn": [
    "LambdaKinesisStreamServiceRoleDefaultPolicyF267DCB3",
    "LambdaKinesisStreamServiceRole1ED1B3BD"
   ],
   "Metadata": {
    "aws:cdk:path": "CdkIotStack/LambdaKinesisStream/Resource",
    "aws:asset:path": "asset.1f237f8bdc1f8621b653c2bc69442cb55d3ca433fabc7b6eee1dada665967e82",
    "aws:asset:is-bundled": false,
    "aws:asset:property": "Code"
   }
  },
  "LambdaKinesisStreamKinesisEventSourceCdkIotStackStream9740E3205D1EAF24": {
   "Type": "AWS::Lambda::EventSourceMapping",
   "Properties": {
    "FunctionName": {
     "Ref": "LambdaKinesisStream88AE1F2E"
    },
    "BatchSize": 100,
    "EventSourceArn": {
     "Fn::GetAtt": [
      "Stream790BDEE4",
      "Arn"
     ]
    },
    "StartingPosition": "TRIM_HORIZON"
   },
   "Metadata": {
    "aws:cdk:path": "CdkIotStack/LambdaKinesisStream/KinesisEventSource:CdkIotStackStream9740E320/Resource"
   }
  },
  "LambdaSlackServiceRole519A82E6": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "lambda.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "ManagedPolicyArns": [
     {
      "Fn::Join": [
       "",
       [
        "arn:",
        {
         "Ref": "AWS::Partition"
        },
        ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
       ]
      ]
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "CdkIotStack/LambdaSlack/ServiceRole/Resource"
   }
  },
  "LambdaSlackA1FFF73E": {
   "Type": "AWS::Lambda::Function",
   "Properties": {
    "Code": {
     "S3Bucket": {
      "Fn::Sub": "cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}"
     },
     "S3Key": "93d1e254d55666854a1de90fd23697cfb9ef716a73c87bcc084acea6dbada78d.zip"
    },
    "Role": {
     "Fn::GetAtt": [
      "LambdaSlackServiceRole519A82E6",
      "Arn"
     ]
    },
    "Environment": {
     "Variables": {
      "token": "sample-3205298473938-3233090599600-5Kr8k7W8dieUwoL5d7GekmpJ"
     }
    },
    "Handler": "index.handler",
    "Runtime": "nodejs14.x",
    "Timeout": 10
   },
   "DependsOn": [
    "LambdaSlackServiceRole519A82E6"
   ],
   "Metadata": {
    "aws:cdk:path": "CdkIotStack/LambdaSlack/Resource",
    "aws:asset:path": "asset.93d1e254d55666854a1de90fd23697cfb9ef716a73c87bcc084acea6dbada78d",
    "aws:asset:is-bundled": false,
    "aws:asset:property": "Code"
   }
  },
  "LambdaSlackAllowInvokeCdkIotStacksnsiot7350D5FB7F172C32": {
   "Type": "AWS::Lambda::Permission",
   "Properties": {
    "Action": "lambda:InvokeFunction",
    "FunctionName": {
     "Fn::GetAtt": [
      "LambdaSlackA1FFF73E",
      "Arn"
     ]
    },
    "Principal": "sns.amazonaws.com",
    "SourceArn": {
     "Ref": "snsiot647BE6CE"
    }
   },
   "Metadata": {
    "aws:cdk:path": "CdkIotStack/LambdaSlack/AllowInvoke:CdkIotStacksnsiot7350D5FB"
   }
  },
  "LambdaSlacksnsiotA206DBCA": {
   "Type": "AWS::SNS::Subscription",
   "Properties": {
    "Protocol": "lambda",
    "TopicArn": {
     "Ref": "snsiot647BE6CE"
    },
    "Endpoint": {
     "Fn::GetAtt": [
      "LambdaSlackA1FFF73E",
      "Arn"
     ]
    }
   },
   "Metadata": {
    "aws:cdk:path": "CdkIotStack/LambdaSlack/sns-iot/Resource"
   }
  },
  "ruleRole5807C10C": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "iot.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "Description": "Role of Rule for IoT",
    "RoleName": "RuleRole"
   },
   "Metadata": {
    "aws:cdk:path": "CdkIotStack/ruleRole/Resource"
   }
  },
  "ruleRoleDefaultPolicy18B4CD88": {
   "Type": "AWS::IAM::Policy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": "kinesis:PutRecord",
       "Effect": "Allow",
       "Resource": {
        "Fn::GetAtt": [
         "Stream790BDEE4",
         "Arn"
        ]
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "PolicyName": "ruleRoleDefaultPolicy18B4CD88",
    "Roles": [
     {
      "Ref": "ruleRole5807C10C"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "CdkIotStack/ruleRole/DefaultPolicy/Resource"
   }
  },
  "TopicRule": {
   "Type": "AWS::IoT::TopicRule",
   "Properties": {
    "TopicRulePayload": {
     "Actions": [
      {
       "Kinesis": {
        "PartitionKey": "${clientToken}",
        "RoleArn": {
         "Fn::GetAtt": [
          "ruleRole5807C10C",
          "Arn"
         ]
        },
        "StreamName": "themometer"
       }
      }
     ],
     "RuleDisabled": false,
     "Sql": "SELECT * FROM '$aws/things/+/shadow/update'"
    },
    "RuleName": "themometer"
   },
   "Metadata": {
    "aws:cdk:path": "CdkIotStack/TopicRule"
   }
  },
  "LambdaKinesisFirehoseServiceRoleA0A46308": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "lambda.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "ManagedPolicyArns": [
     {
      "Fn::Join": [
       "",
       [
        "arn:",
        {
         "Ref": "AWS::Partition"
        },
        ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
       ]
      ]
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "CdkIotStack/LambdaKinesisFirehose/ServiceRole/Resource"
   }
  },
  "LambdaKinesisFirehoseE096B30B": {
   "Type": "AWS::Lambda::Function",
   "Properties": {
    "Code": {
     "S3Bucket": {
      "Fn::Sub": "cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}"
     },
     "S3Key": "f5041f2882fb03cc46765bb1f56c90eb20c389ad2c6f99e7bf1a9dc020c67344.zip"
    },
    "Role": {
     "Fn::GetAtt": [
      "LambdaKinesisFirehoseServiceRoleA0A46308",
      "Arn"
     ]
    },
    "Description": "update event sources",
    "Handler": "index.handler",
    "Runtime": "nodejs14.x",
    "Timeout": 3
   },
   "DependsOn": [
    "LambdaKinesisFirehoseServiceRoleA0A46308"
   ],
   "Metadata": {
    "aws:cdk:path": "CdkIotStack/LambdaKinesisFirehose/Resource",
    "aws:asset:path": "asset.f5041f2882fb03cc46765bb1f56c90eb20c389ad2c6f99e7bf1a9dc020c67344",
    "aws:asset:is-bundled": false,
    "aws:asset:property": "Code"
   }
  },
  "crawlerRoleCB71E89D": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "glue.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "Description": "Role for crawler",
    "ManagedPolicyArns": [
     "arn:aws:iam::aws:policy/service-role/AWSGlueServiceRole"
    ],
    "RoleName": "CrawlerRole"
   },
   "Metadata": {
    "aws:cdk:path": "CdkIotStack/crawlerRole/Resource"
   }
  },
  "crawlerRoleDefaultPolicy7109B2A3": {
   "Type": "AWS::IAM::Policy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": [
        "s3:AbortMultipartUpload",
        "s3:GetBucketLocation",
        "s3:GetObject",
        "s3:ListBucket",
        "s3:ListBucketMultipartUploads",
        "s3:PutObject"
       ],
       "Effect": "Allow",
       "Resource": [
        {
         "Fn::GetAtt": [
          "thermometerstorageA03733C7",
          "Arn"
         ]
        },
        {
         "Fn::Join": [
          "",
          [
           {
            "Fn::GetAtt": [
             "thermometerstorageA03733C7",
             "Arn"
            ]
           },
           "/*"
          ]
         ]
        }
       ]
      }
     ],
     "Version": "2012-10-17"
    },
    "PolicyName": "crawlerRoleDefaultPolicy7109B2A3",
    "Roles": [
     {
      "Ref": "crawlerRoleCB71E89D"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "CdkIotStack/crawlerRole/DefaultPolicy/Resource"
   }
  },
  "TranslateRecords": {
   "Type": "AWS::Glue::Crawler",
   "Properties": {
    "Role": {
     "Fn::GetAtt": [
      "crawlerRoleCB71E89D",
      "Arn"
     ]
    },
    "Targets": {
     "S3Targets": [
      {
       "Path": {
        "Fn::Join": [
         "",
         [
          "s3://",
          {
           "Ref": "thermometerstorageA03733C7"
          },
          "/themometer"
         ]
        ]
       }
      }
     ]
    },
    "DatabaseName": "themometerDb",
    "Name": "translate-records",
    "Schedule": {
     "ScheduleExpression": "cron(15 * * * ? *)"
    },
    "SchemaChangePolicy": {
     "DeleteBehavior": "DELETE_FROM_DATABASE",
     "UpdateBehavior": "UPDATE_IN_DATABASE"
    }
   },
   "Metadata": {
    "aws:cdk:path": "CdkIotStack/TranslateRecords"
   }
  },
  "TranslationRole574EADCA": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "firehose.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "Description": "TraslationRole",
    "ManagedPolicyArns": [
     "arn:aws:iam::aws:policy/AWSLambdaExecute",
     "arn:aws:iam::aws:policy/service-role/AWSLambdaKinesisExecutionRole",
     "arn:aws:iam::aws:policy/service-role/AWSGlueServiceRole"
    ],
    "RoleName": "TranslationRole"
   },
   "Metadata": {
    "aws:cdk:path": "CdkIotStack/TranslationRole/Resource"
   }
  },
  "TranslationRoleDefaultPolicyE90E301D": {
   "Type": "AWS::IAM::Policy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": [
        "s3:AbortMultipartUpload",
        "s3:GetBucketLocation",
        "s3:GetObject",
        "s3:ListBucket",
        "s3:ListBucketMultipartUploads",
        "s3:PutObject"
       ],
       "Effect": "Allow",
       "Resource": [
        {
         "Fn::GetAtt": [
          "thermometerstorageA03733C7",
          "Arn"
         ]
        },
        {
         "Fn::Join": [
          "",
          [
           {
            "Fn::GetAtt": [
             "thermometerstorageA03733C7",
             "Arn"
            ]
           },
           "/*"
          ]
         ]
        }
       ]
      },
      {
       "Action": [
        "lambda:GetFunctionConfiguration",
        "lambda:InvokeFunction"
       ],
       "Effect": "Allow",
       "Resource": [
        {
         "Fn::GetAtt": [
          "LambdaKinesisFirehoseE096B30B",
          "Arn"
         ]
        },
        {
         "Fn::Join": [
          "",
          [
           {
            "Fn::GetAtt": [
             "LambdaKinesisFirehoseE096B30B",
             "Arn"
            ]
           },
           ":*"
          ]
         ]
        }
       ]
      },
      {
       "Action": [
        "glue:GetTable",
        "glue:GetTableVersion",
        "glue:GetTableVersions"
       ],
       "Effect": "Allow",
       "Resource": "*"
      }
     ],
     "Version": "2012-10-17"
    },
    "PolicyName": "TranslationRoleDefaultPolicyE90E301D",
    "Roles": [
     {
      "Ref": "TranslationRole574EADCA"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "CdkIotStack/TranslationRole/DefaultPolicy/Resource"
   }
  },
  "FirehoseDeliveryStream": {
   "Type": "AWS::KinesisFirehose::DeliveryStream",
   "Properties": {
    "DeliveryStreamType": "KinesisStreamAsSource",
    "ExtendedS3DestinationConfiguration": {
     "BucketARN": {
      "Fn::GetAtt": [
       "thermometerstorageA03733C7",
       "Arn"
      ]
     },
     "BufferingHints": {
      "IntervalInSeconds": 60,
      "SizeInMBs": 128
     },
     "CompressionFormat": "UNCOMPRESSED",
     "DataFormatConversionConfiguration": {
      "Enabled": false,
      "SchemaConfiguration": {
       "DatabaseName": "themometerDb",
       "RoleARN": {
        "Fn::GetAtt": [
         "TranslationRole574EADCA",
         "Arn"
        ]
       },
       "TableName": "themometer"
      }
     },
     "EncryptionConfiguration": {
      "NoEncryptionConfig": "NoEncryption"
     },
     "ErrorOutputPrefix": "eror/",
     "Prefix": "themometer/",
     "ProcessingConfiguration": {
      "Enabled": true,
      "Processors": [
       {
        "Parameters": [
         {
          "ParameterName": "LambdaArn",
          "ParameterValue": {
           "Fn::GetAtt": [
            "LambdaKinesisFirehoseE096B30B",
            "Arn"
           ]
          }
         }
        ],
        "Type": "Lambda"
       }
      ]
     },
     "RoleARN": {
      "Fn::GetAtt": [
       "TranslationRole574EADCA",
       "Arn"
      ]
     }
    },
    "KinesisStreamSourceConfiguration": {
     "KinesisStreamARN": {
      "Fn::GetAtt": [
       "Stream790BDEE4",
       "Arn"
      ]
     },
     "RoleARN": {
      "Fn::GetAtt": [
       "TranslationRole574EADCA",
       "Arn"
      ]
     }
    }
   },
   "Metadata": {
    "aws:cdk:path": "CdkIotStack/FirehoseDeliveryStream"
   }
  },
  "analyticsathenaworkgroup": {
   "Type": "AWS::Athena::WorkGroup",
   "Properties": {
    "Name": "themometer-workgroup",
    "Description": "athena working group",
    "RecursiveDeleteOption": true,
    "State": "ENABLED",
    "WorkGroupConfiguration": {
     "ResultConfiguration": {
      "OutputLocation": {
       "Fn::Join": [
        "",
        [
         "s3://",
         {
          "Ref": "thermometerstorageA03733C7"
         }
        ]
       ]
      }
     }
    }
   },
   "Metadata": {
    "aws:cdk:path": "CdkIotStack/analytics-athena-workgroup"
   }
  },
  "athenaRoleC02D81FF": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "lambda.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "Description": "Athena Role",
    "RoleName": "AthenaRole"
   },
   "Metadata": {
    "aws:cdk:path": "CdkIotStack/athenaRole/Resource"
   }
  },
  "athenaRoleDefaultPolicy7218C7E2": {
   "Type": "AWS::IAM::Policy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": [
        "athena:BatchGetQueryExecution",
        "athena:GetDataCatalog",
        "athena:GetDatabase",
        "athena:GetQueryExecution",
        "athena:GetQueryResults",
        "athena:GetQueryResultsStream",
        "athena:GetTableMetadata",
        "athena:GetWorkGroup",
        "athena:ListDataCatalogs",
        "athena:ListDatabases",
        "athena:ListEngineVersions",
        "athena:ListQueryExecutions",
        "athena:ListTableMetadata",
        "athena:ListWorkGroups",
        "athena:StartQueryExecution",
        "athena:StopQueryExecution"
       ],
       "Effect": "Allow",
       "Resource": [
        {
         "Fn::Join": [
          "",
          [
           "arn:aws:athena:",
           {
            "Ref": "AWS::Region"
           },
           ":",
           {
            "Ref": "AWS::AccountId"
           },
           ":workgroup/primary"
          ]
         ]
        },
        {
         "Fn::Join": [
          "",
          [
           "arn:aws:athena:",
           {
            "Ref": "AWS::Region"
           },
           ":",
           {
            "Ref": "AWS::AccountId"
           },
           ":workgroup/themometer-workgroup"
          ]
         ]
        }
       ]
      },
      {
       "Action": [
        "glue:GetDatabase",
        "glue:GetPartitions",
        "glue:GetTable"
       ],
       "Effect": "Allow",
       "Resource": "*"
      },
      {
       "Action": [
        "s3:AbortMultipartUpload",
        "s3:CreateBucket",
        "s3:GetBucketLocation",
        "s3:GetObject",
        "s3:ListBucket",
        "s3:ListBucketMultipartUploads",
        "s3:ListMultipartUploadParts",
        "s3:PutBucketPublicAccessBlock",
        "s3:PutObject"
       ],
       "Effect": "Allow",
       "Resource": [
        {
         "Fn::GetAtt": [
          "thermometerstorageA03733C7",
          "Arn"
         ]
        },
        {
         "Fn::Join": [
          "",
          [
           {
            "Fn::GetAtt": [
             "thermometerstorageA03733C7",
             "Arn"
            ]
           },
           "/*"
          ]
         ]
        }
       ]
      },
      {
       "Action": [
        "logs:CreateLogGroup",
        "logs:CreateLogStream",
        "logs:PutLogEvents"
       ],
       "Effect": "Allow",
       "Resource": {
        "Fn::Join": [
         "",
         [
          "arn:aws:logs:",
          {
           "Ref": "AWS::Region"
          },
          ":",
          {
           "Ref": "AWS::AccountId"
          },
          ":*"
         ]
        ]
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "PolicyName": "athenaRoleDefaultPolicy7218C7E2",
    "Roles": [
     {
      "Ref": "athenaRoleC02D81FF"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "CdkIotStack/athenaRole/DefaultPolicy/Resource"
   }
  },
  "LambdaAthenaB5D0C109": {
   "Type": "AWS::Lambda::Function",
   "Properties": {
    "Code": {
     "S3Bucket": {
      "Fn::Sub": "cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}"
     },
     "S3Key": "abf9862c02aa3c1caffb9632b308ef86477264152715cf10d4cd97e9af8b90ef.zip"
    },
    "Role": {
     "Fn::GetAtt": [
      "athenaRoleC02D81FF",
      "Arn"
     ]
    },
    "Description": "query athena",
    "Environment": {
     "Variables": {
      "athenaBucket": {
       "Fn::GetAtt": [
        "thermometerstorageA03733C7",
        "Arn"
       ]
      },
      "dbName": "themometerDb",
      "workGroup": "themometer-workgroup"
     }
    },
    "Handler": "index.handler",
    "Runtime": "nodejs14.x",
    "Timeout": 20
   },
   "DependsOn": [
    "athenaRoleDefaultPolicy7218C7E2",
    "athenaRoleC02D81FF"
   ],
   "Metadata": {
    "aws:cdk:path": "CdkIotStack/LambdaAthena/Resource",
    "aws:asset:path": "asset.abf9862c02aa3c1caffb9632b308ef86477264152715cf10d4cd97e9af8b90ef",
    "aws:asset:is-bundled": false,
    "aws:asset:property": "Code"
   }
  },
  "LambdaAthenaallInvocation9F76F673": {
   "Type": "AWS::Lambda::Permission",
   "Properties": {
    "Action": "lambda:InvokeFunction",
    "FunctionName": {
     "Fn::GetAtt": [
      "LambdaAthenaB5D0C109",
      "Arn"
     ]
    },
    "Principal": "apigateway.amazonaws.com"
   },
   "Metadata": {
    "aws:cdk:path": "CdkIotStack/LambdaAthena/allInvocation"
   }
  },
  "LambdaAthenaInvokeFcyXBRX02EWa52GlFECQiCzDt0fdRUDi4mo4foC5aU5EFA156A": {
   "Type": "AWS::Lambda::Permission",
   "Properties": {
    "Action": "lambda:InvokeFunction",
    "FunctionName": {
     "Fn::GetAtt": [
      "LambdaAthenaB5D0C109",
      "Arn"
     ]
    },
    "Principal": "apigateway.amazonaws.com"
   },
   "Metadata": {
    "aws:cdk:path": "CdkIotStack/LambdaAthena/InvokeFcyXBRX02EWa52GlF+ECQiCzDt0fdRUDi4mo4foC5aU="
   }
  },
  "AccessLogs8B620ECA": {
   "Type": "AWS::Logs::LogGroup",
   "Properties": {
    "RetentionInDays": 90
   },
   "UpdateReplacePolicy": "Retain",
   "DeletionPolicy": "Retain",
   "Metadata": {
    "aws:cdk:path": "CdkIotStack/AccessLogs/Resource"
   }
  },
  "AccessLogsPolicyResourcePolicyA1E3EF94": {
   "Type": "AWS::Logs::ResourcePolicy",
   "Properties": {
    "PolicyDocument": {
     "Fn::Join": [
      "",
      [
       "{\"Statement\":[{\"Action\":[\"logs:CreateLogStream\",\"logs:PutLogEvents\"],\"Effect\":\"Allow\",\"Principal\":{\"Service\":\"apigateway.amazonaws.com\"},\"Resource\":\"",
       {
        "Fn::GetAtt": [
         "AccessLogs8B620ECA",
         "Arn"
        ]
       },
       "\"}],\"Version\":\"2012-10-17\"}"
      ]
     ]
    },
    "PolicyName": "CdkIotStackAccessLogsPolicy52692585"
   },
   "Metadata": {
    "aws:cdk:path": "CdkIotStack/AccessLogs/Policy/ResourcePolicy"
   }
  },
  "apirole22477616": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "apigateway.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "ManagedPolicyArns": [
     "arn:aws:iam::aws:policy/AWSLambdaExecute"
    ],
    "RoleName": "ApiRole"
   },
   "Metadata": {
    "aws:cdk:path": "CdkIotStack/api-role/Resource"
   }
  },
  "apiroleDefaultPolicy160A02CD": {
   "Type": "AWS::IAM::Policy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": "lambda:InvokeFunction",
       "Effect": "Allow",
       "Resource": "*"
      }
     ],
     "Version": "2012-10-17"
    },
    "PolicyName": "apiroleDefaultPolicy160A02CD",
    "Roles": [
     {
      "Ref": "apirole22477616"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "CdkIotStack/api-role/DefaultPolicy/Resource"
   }
  },
  "apithermometer527A2812": {
   "Type": "AWS::ApiGateway::RestApi",
   "Properties": {
    "BinaryMediaTypes": [
     "*/*"
    ],
    "Description": "API Gateway",
    "EndpointConfiguration": {
     "Types": [
      "REGIONAL"
     ]
    },
    "Name": "api-thermometer"
   },
   "Metadata": {
    "aws:cdk:path": "CdkIotStack/api-thermometer/Resource"
   }
  },
  "apithermometerCloudWatchRoleD43FB1D8": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "apigateway.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "ManagedPolicyArns": [
     {
      "Fn::Join": [
       "",
       [
        "arn:",
        {
         "Ref": "AWS::Partition"
        },
        ":iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs"
       ]
      ]
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "CdkIotStack/api-thermometer/CloudWatchRole/Resource"
   }
  },
  "apithermometerAccount473ADE2F": {
   "Type": "AWS::ApiGateway::Account",
   "Properties": {
    "CloudWatchRoleArn": {
     "Fn::GetAtt": [
      "apithermometerCloudWatchRoleD43FB1D8",
      "Arn"
     ]
    }
   },
   "DependsOn": [
    "apithermometer527A2812"
   ],
   "Metadata": {
    "aws:cdk:path": "CdkIotStack/api-thermometer/Account"
   }
  },
  "apithermometerDeploymentCAEACC8C36ac89907123929172cc43b6cb02158a": {
   "Type": "AWS::ApiGateway::Deployment",
   "Properties": {
    "RestApiId": {
     "Ref": "apithermometer527A2812"
    },
    "Description": "Automatically created by the RestApi construct"
   },
   "DependsOn": [
    "apithermometerstatusGET6028E375",
    "apithermometerstatus9A4FEE8E"
   ],
   "Metadata": {
    "aws:cdk:path": "CdkIotStack/api-thermometer/Deployment/Resource"
   }
  },
  "apithermometerDeploymentStagedevF8B8FDAF": {
   "Type": "AWS::ApiGateway::Stage",
   "Properties": {
    "RestApiId": {
     "Ref": "apithermometer527A2812"
    },
    "AccessLogSetting": {
     "DestinationArn": {
      "Fn::GetAtt": [
       "AccessLogs8B620ECA",
       "Arn"
      ]
     },
     "Format": "{\"requestId\":\"$context.requestId\",\"ip\":\"$context.identity.sourceIp\",\"user\":\"$context.identity.user\",\"requestTime\":\"$context.requestTime\",\"httpMethod\":\"$context.httpMethod\",\"resourcePath\":\"$context.resourcePath\",\"status\":\"$context.status\",\"protocol\":\"$context.protocol\",\"responseLength\":\"$context.responseLength\"}"
    },
    "DeploymentId": {
     "Ref": "apithermometerDeploymentCAEACC8C36ac89907123929172cc43b6cb02158a"
    },
    "StageName": "dev"
   },
   "DependsOn": [
    "apithermometerAccount473ADE2F"
   ],
   "Metadata": {
    "aws:cdk:path": "CdkIotStack/api-thermometer/DeploymentStage.dev/Resource"
   }
  },
  "apithermometerstatus9A4FEE8E": {
   "Type": "AWS::ApiGateway::Resource",
   "Properties": {
    "ParentId": {
     "Fn::GetAtt": [
      "apithermometer527A2812",
      "RootResourceId"
     ]
    },
    "PathPart": "status",
    "RestApiId": {
     "Ref": "apithermometer527A2812"
    }
   },
   "Metadata": {
    "aws:cdk:path": "CdkIotStack/api-thermometer/Default/status/Resource"
   }
  },
  "apithermometerstatusGETApiPermissionCdkIotStackapithermometer186F9691GETstatusD64102B0": {
   "Type": "AWS::Lambda::Permission",
   "Properties": {
    "Action": "lambda:InvokeFunction",
    "FunctionName": {
     "Fn::GetAtt": [
      "LambdaAthenaB5D0C109",
      "Arn"
     ]
    },
    "Principal": "apigateway.amazonaws.com",
    "SourceArn": {
     "Fn::Join": [
      "",
      [
       "arn:",
       {
        "Ref": "AWS::Partition"
       },
       ":execute-api:",
       {
        "Ref": "AWS::Region"
       },
       ":",
       {
        "Ref": "AWS::AccountId"
       },
       ":",
       {
        "Ref": "apithermometer527A2812"
       },
       "/",
       {
        "Ref": "apithermometerDeploymentStagedevF8B8FDAF"
       },
       "/GET/status"
      ]
     ]
    }
   },
   "Metadata": {
    "aws:cdk:path": "CdkIotStack/api-thermometer/Default/status/GET/ApiPermission.CdkIotStackapithermometer186F9691.GET..status"
   }
  },
  "apithermometerstatusGETApiPermissionTestCdkIotStackapithermometer186F9691GETstatus38927CE7": {
   "Type": "AWS::Lambda::Permission",
   "Properties": {
    "Action": "lambda:InvokeFunction",
    "FunctionName": {
     "Fn::GetAtt": [
      "LambdaAthenaB5D0C109",
      "Arn"
     ]
    },
    "Principal": "apigateway.amazonaws.com",
    "SourceArn": {
     "Fn::Join": [
      "",
      [
       "arn:",
       {
        "Ref": "AWS::Partition"
       },
       ":execute-api:",
       {
        "Ref": "AWS::Region"
       },
       ":",
       {
        "Ref": "AWS::AccountId"
       },
       ":",
       {
        "Ref": "apithermometer527A2812"
       },
       "/test-invoke-stage/GET/status"
      ]
     ]
    }
   },
   "Metadata": {
    "aws:cdk:path": "CdkIotStack/api-thermometer/Default/status/GET/ApiPermission.Test.CdkIotStackapithermometer186F9691.GET..status"
   }
  },
  "apithermometerstatusGET6028E375": {
   "Type": "AWS::ApiGateway::Method",
   "Properties": {
    "HttpMethod": "GET",
    "ResourceId": {
     "Ref": "apithermometerstatus9A4FEE8E"
    },
    "RestApiId": {
     "Ref": "apithermometer527A2812"
    },
    "AuthorizationType": "NONE",
    "Integration": {
     "Credentials": {
      "Fn::GetAtt": [
       "apirole22477616",
       "Arn"
      ]
     },
     "IntegrationHttpMethod": "POST",
     "IntegrationResponses": [
      {
       "StatusCode": "200"
      }
     ],
     "PassthroughBehavior": "WHEN_NO_TEMPLATES",
     "Type": "AWS",
     "Uri": {
      "Fn::Join": [
       "",
       [
        "arn:",
        {
         "Ref": "AWS::Partition"
        },
        ":apigateway:",
        {
         "Ref": "AWS::Region"
        },
        ":lambda:path/2015-03-31/functions/",
        {
         "Fn::GetAtt": [
          "LambdaAthenaB5D0C109",
          "Arn"
         ]
        },
        "/invocations"
       ]
      ]
     }
    },
    "MethodResponses": [
     {
      "ResponseModels": {
       "application/json": "Empty"
      },
      "StatusCode": "200"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "CdkIotStack/api-thermometer/Default/status/GET/Resource"
   }
  },
  "cloudfrontOrigin1S3Origin57D92FB4": {
   "Type": "AWS::CloudFront::CloudFrontOriginAccessIdentity",
   "Properties": {
    "CloudFrontOriginAccessIdentityConfig": {
     "Comment": "Identity for CdkIotStackcloudfrontOrigin10852A449"
    }
   },
   "Metadata": {
    "aws:cdk:path": "CdkIotStack/cloudfront/Origin1/S3Origin/Resource"
   }
  },
  "cloudfrontB139FFFD": {
   "Type": "AWS::CloudFront::Distribution",
   "Properties": {
    "DistributionConfig": {
     "CacheBehaviors": [
      {
       "CachePolicyId": "4135ea2d-6df8-44a3-9df3-4b5a84be39ad",
       "Compress": true,
       "PathPattern": "/status*",
       "TargetOriginId": "CdkIotStackcloudfrontOrigin223C036B8",
       "ViewerProtocolPolicy": "redirect-to-https"
      }
     ],
     "DefaultCacheBehavior": {
      "AllowedMethods": [
       "GET",
       "HEAD",
       "OPTIONS",
       "PUT",
       "PATCH",
       "POST",
       "DELETE"
      ],
      "CachePolicyId": "4135ea2d-6df8-44a3-9df3-4b5a84be39ad",
      "Compress": true,
      "TargetOriginId": "CdkIotStackcloudfrontOrigin10852A449",
      "ViewerProtocolPolicy": "redirect-to-https"
     },
     "Enabled": true,
     "HttpVersion": "http2",
     "IPV6Enabled": true,
     "Origins": [
      {
       "DomainName": {
        "Fn::GetAtt": [
         "themometerwebA10CBA95",
         "RegionalDomainName"
        ]
       },
       "Id": "CdkIotStackcloudfrontOrigin10852A449",
       "S3OriginConfig": {
        "OriginAccessIdentity": {
         "Fn::Join": [
          "",
          [
           "origin-access-identity/cloudfront/",
           {
            "Ref": "cloudfrontOrigin1S3Origin57D92FB4"
           }
          ]
         ]
        }
       }
      },
      {
       "CustomOriginConfig": {
        "OriginProtocolPolicy": "https-only",
        "OriginSSLProtocols": [
         "TLSv1.2"
        ]
       },
       "DomainName": {
        "Fn::Select": [
         2,
         {
          "Fn::Split": [
           "/",
           {
            "Fn::Join": [
             "",
             [
              "https://",
              {
               "Ref": "apithermometer527A2812"
              },
              ".execute-api.",
              {
               "Ref": "AWS::Region"
              },
              ".",
              {
               "Ref": "AWS::URLSuffix"
              },
              "/",
              {
               "Ref": "apithermometerDeploymentStagedevF8B8FDAF"
              },
              "/"
             ]
            ]
           }
          ]
         }
        ]
       },
       "Id": "CdkIotStackcloudfrontOrigin223C036B8",
       "OriginPath": {
        "Fn::Join": [
         "",
         [
          "/",
          {
           "Fn::Select": [
            3,
            {
             "Fn::Split": [
              "/",
              {
               "Fn::Join": [
                "",
                [
                 "https://",
                 {
                  "Ref": "apithermometer527A2812"
                 },
                 ".execute-api.",
                 {
                  "Ref": "AWS::Region"
                 },
                 ".",
                 {
                  "Ref": "AWS::URLSuffix"
                 },
                 "/",
                 {
                  "Ref": "apithermometerDeploymentStagedevF8B8FDAF"
                 },
                 "/"
                ]
               ]
              }
             ]
            }
           ]
          }
         ]
        ]
       }
      }
     ],
     "PriceClass": "PriceClass_200"
    }
   },
   "Metadata": {
    "aws:cdk:path": "CdkIotStack/cloudfront/Resource"
   }
  },
  "CDKMetadata": {
   "Type": "AWS::CDK::Metadata",
   "Properties": {
    "Analytics": "v2:deflate64:H4sIAAAAAAAA/3VTTW/bMAz9LbsrWtcCw65psg4DWjRIhu0YKDLjsJZFQ5QSGIb/+yTLdlKgPfHxkeK37uX9d3n3RV14oYtqYfAgu51XuhKR2nf8ILvHoCvwYnW0I8piQwZ1e6VHPSuPiqEX/LDvCmgMtTVYL7NpPRNCMYNnuUyiF0bVh0LJLkZ8Vi24v+AYyYod2tKAJ/sUrPaJmUF0nfHPcwy5o+A0vKimiY+S+WN2A65GTtF7gaqW3ZYMJMMgr51l1IsKLTByGo0DVSdTRrFHG+k/1KBObAa7cGDtsJlqvNVjQvJyct2GmK80ARKzcupiwE3ZjujgRDyY1mDwDK4d8yt/AquS4R+56pej0AhDZazkmcqspilOeAs8TODa2HumF6rBUnm4qDbOAtgvGxzdJrjUmkLc2c36hrpmLV5NCXkyCUwZ0iXMym1q8QL+REWiMuqFNhSKo6N4K90a2Ts8hGGGrw5LTCUA8+8iZkM/tLFKD57Sg888bsP0vVgF9lR/WM5708bRGYu4jOE4U0vj6bwG3wQ/HuvepEPdx6+iDcrlhVcGh9sdiiNbYF65pQLkG389f/sh7+J3e2PEhYvjxBrkNsv/AEMB9YoDAAA="
   },
   "Metadata": {
    "aws:cdk:path": "CdkIotStack/CDKMetadata/Default"
   },
   "Condition": "CDKMetadataAvailable"
  }
 },
 "Outputs": {
  "StorageBucketName": {
   "Description": "The nmae of bucket",
   "Value": {
    "Ref": "thermometerstorageA03733C7"
   }
  },
  "s3Arn": {
   "Description": "The arn of s3",
   "Value": {
    "Fn::GetAtt": [
     "thermometerstorageA03733C7",
     "Arn"
    ]
   }
  },
  "s3Path": {
   "Description": "The path of s3",
   "Value": {
    "Fn::Join": [
     "",
     [
      "s3://",
      {
       "Ref": "thermometerstorageA03733C7"
      }
     ]
    ]
   }
  },
  "WebBucketName": {
   "Description": "The nmae of bucket",
   "Value": {
    "Ref": "themometerwebA10CBA95"
   }
  },
  "StreamARN": {
   "Description": "The arn of kinesis stream",
   "Value": {
    "Fn::GetAtt": [
     "Stream790BDEE4",
     "Arn"
    ]
   }
  },
  "snsTopicArn": {
   "Description": "The arn of the SNS topic",
   "Value": {
    "Ref": "snsiot647BE6CE"
   }
  },
  "RuleRoleArn": {
   "Description": "The arn of RuleRole for IoT",
   "Value": {
    "Fn::GetAtt": [
     "ruleRole5807C10C",
     "Arn"
    ]
   }
  },
  "LambdaKinesisARN": {
   "Description": "The arn of lambda for kinesis",
   "Value": {
    "Fn::GetAtt": [
     "LambdaKinesisFirehoseE096B30B",
     "Arn"
    ]
   }
  },
  "crawlerRoleArn": {
   "Description": "The arn of crawlerRole",
   "Value": {
    "Fn::GetAtt": [
     "crawlerRoleCB71E89D",
     "Arn"
    ]
   }
  },
  "workgroupArn": {
   "Description": "The arn of workgroup",
   "Value": {
    "Fn::Join": [
     "",
     [
      "arn:aws:athena:",
      {
       "Ref": "AWS::Region"
      },
      ":",
      {
       "Ref": "AWS::AccountId"
      },
      ":workgroup/themometer-workgroup"
     ]
    ]
   }
  },
  "AthenaRoleArn": {
   "Description": "The arn of AthenaRole",
   "Value": {
    "Fn::GetAtt": [
     "athenaRoleC02D81FF",
     "Arn"
    ]
   }
  },
  "LambdaAthenaARN": {
   "Description": "The arn of lambda for athena",
   "Value": {
    "Fn::GetAtt": [
     "LambdaAthenaB5D0C109",
     "Arn"
    ]
   }
  },
  "apithermometerEndpoint270F7E09": {
   "Value": {
    "Fn::Join": [
     "",
     [
      "https://",
      {
       "Ref": "apithermometer527A2812"
      },
      ".execute-api.",
      {
       "Ref": "AWS::Region"
      },
      ".",
      {
       "Ref": "AWS::URLSuffix"
      },
      "/",
      {
       "Ref": "apithermometerDeploymentStagedevF8B8FDAF"
      },
      "/"
     ]
    ]
   }
  },
  "apiUrl": {
   "Description": "The url of API Gateway",
   "Value": {
    "Fn::Join": [
     "",
     [
      "https://",
      {
       "Ref": "apithermometer527A2812"
      },
      ".execute-api.",
      {
       "Ref": "AWS::Region"
      },
      ".",
      {
       "Ref": "AWS::URLSuffix"
      },
      "/",
      {
       "Ref": "apithermometerDeploymentStagedevF8B8FDAF"
      },
      "/"
     ]
    ]
   }
  },
  "distributionDomainName": {
   "Description": "The domain name of the Distribution",
   "Value": {
    "Fn::GetAtt": [
     "cloudfrontB139FFFD",
     "DomainName"
    ]
   }
  }
 },
 "Conditions": {
  "CDKMetadataAvailable": {
   "Fn::Or": [
    {
     "Fn::Or": [
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "af-south-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ap-east-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ap-northeast-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ap-northeast-2"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ap-south-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ap-southeast-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ap-southeast-2"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ca-central-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "cn-north-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "cn-northwest-1"
       ]
      }
     ]
    },
    {
     "Fn::Or": [
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "eu-central-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "eu-north-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "eu-south-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "eu-west-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "eu-west-2"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "eu-west-3"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "me-south-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "sa-east-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "us-east-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "us-east-2"
       ]
      }
     ]
    },
    {
     "Fn::Or": [
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "us-west-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "us-west-2"
       ]
      }
     ]
    }
   ]
  }
 },
 "Parameters": {
  "BootstrapVersion": {
   "Type": "AWS::SSM::Parameter::Value<String>",
   "Default": "/cdk-bootstrap/hnb659fds/version",
   "Description": "Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]"
  }
 },
 "Rules": {
  "CheckBootstrapVersion": {
   "Assertions": [
    {
     "Assert": {
      "Fn::Not": [
       {
        "Fn::Contains": [
         [
          "1",
          "2",
          "3",
          "4",
          "5"
         ],
         {
          "Ref": "BootstrapVersion"
         }
        ]
       }
      ]
     },
     "AssertDescription": "CDK bootstrap stack version 6 required. Please run 'cdk bootstrap' with a recent version of the CDK CLI."
    }
   ]
  }
 }
}